[{"title":"","url":"https://noler.github.io/2020/10/15/Java8新特性-lambda表达式/","content":"@TOC\n\n\n前言最近做了一个项目，项目使用JKD11 其中使用了大量的JKD8的新特性，于是学习总结了一波。\nLambda表达式Lambda 是Java 8 发布的最重要的新特性。接下来就看看lamdba表达式是怎么使用的吧。\n语法（参数）-&gt;  {逻辑语句 ；} \n\n() 括号  ： 括号里代表的是方法的入参。参数为一个时()可以省略，如果无参数或着多个参数则必须存在。\n参数 ：传入的参数名称， 可以忽略参数类型 写成 (x,y） ,x 即可，java 编译器会推导出入参的类型。\n{逻辑语句；} ： 传入的逻辑语句。当主体语句只有一条时  可以省略{ }大括号 以及return 返回关键字，自动返回当前值；  \n\nlambda 表达式示例// 1. 不需要参数,返回值为 5  () -&gt; 5    // 2. 接收一个参数(数字类型),返回其2倍的值  x -&gt; 2 * x    // 3. 接受2个参数(数字),并返回他们的差值  (x, y) -&gt; x – y    // 4. 接收2个int型整数,返回他们的和  (int x, int y) -&gt; x + y    // 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  (String s) -&gt; System.out.print(s)// 6. 接受2个参数(数字),将返回 第一个参数的2倍加上第二个参数的值。(x,y) -&gt; &#123; x= x*2 ;  return x+y;&#125;\n\nlambda 应用示例public class LambdaTest &#123;    public static void main(String[] args) &#123;        List&lt;Integer&gt; integers = Arrays.asList(1, 15, 6, 74);        //lamdba表达式代替接口Consumer&lt;? super T&gt; action        integers.forEach(x-&gt; System.out.println(x));        System.out.println(&quot;===============&quot;);        //lamdba表达式代替接口Comparator  如果不用lamdba表达式        //则需要使用匿名类继承接口然后实现其中的方法        integers.sort( (x,y) -&gt; y-x);        integers.forEach(x-&gt; System.out.println(x));        System.out.println(&quot;==============&quot;);        //lamdba表达式实现IntegerOperation接口的 operation方法        //然后传入get();        get((x,y)-&gt; x*y);    &#125;    static void get(IntegerOperation integerOperation)&#123;        System.out.println(integerOperation.operation(1,1));    &#125;    interface  IntegerOperation&#123;        int operation(Integer integer1,Integer integer2);    &#125;&#125;\n输出结果\n115674&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;741561&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;1\n\n使用 Lambda 表达式需要注意以下两点：\nLambda 表达式主要用来定义行内执行的方法类型接口，例如，一个简单方法接口。在上面例子中，我们Lambda表达式来定义IntegerOperation接口的方法。然后我们定义了get的执行。Lambda 表达式免去了使用匿名方法的麻烦，并且给予Java简单但是强大的函数化的编程能力。\nLambda 变量作用域lambda 表达式可以在内部定义变量，也可以访问外部的变量。\npublic class LambdaTest &#123;    public static void main(String[] args) &#123;        String str = &quot;111&quot;;        stringGet(()-&gt;  str);        stringGet(()-&gt;  &#123;String str2 = &quot;222&quot;; return str2;&#125;);    &#125;    static void stringGet(StringOperation stringOperation)&#123;        System.out.println(stringOperation.operation());    &#125;    interface  StringOperation&#123;        String operation();    &#125;&#125;\n需要注意的是：\n如果在lambda表达式中调用外部的变量，该变量不能被修改，不论是在lambda表达式中或着在之后的代码中。否则编译器会出现编译错误。\n","categories":[],"tags":[]}]